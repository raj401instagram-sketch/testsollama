name: Ollama Server with Managed Cloudflare Tunnel

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'Model to load (e.g., qwen2.5:7b, llama3.1:8b)'
        required: true
        default: 'qwen2.5:0.5b'
        type: string
      test_prompt:
        description: 'Test prompt after model loads'
        required: false
        default: 'Hello! Please respond with your model name and capabilities.'
        type: string
      tunnel_token:
        description: 'Cloudflare Tunnel Token (leave empty to use secret)'
        required: false
        type: string

env:
  OLLAMA_HOST: 0.0.0.0:11543
  OLLAMA_MODELS: /home/runner/.ollama/models
  OLLAMA_KEEP_ALIVE: 30m
  WEBHOOK_URL: https://n8n-latest-l4cl.onrender.com/webhook/034c8802-f6d2-4819-b1fc-04b90835c013
  # Use input token if provided, otherwise use secret
  TUNNEL_TOKEN: ${{ github.event.inputs.tunnel_token || secrets.CLOUDFLARE_TUNNEL_TOKEN }}

jobs:
  ollama-server:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: üöÄ Checkout repository
      uses: actions/checkout@v4
      
    - name: üìä System Information & Setup
      run: |
        echo "==================== SYSTEM INFO ===================="
        echo "üïê Workflow started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üñ•Ô∏è  Runner OS: $(uname -a)"
        echo "üíæ Memory Info:"
        free -h
        echo "üîß CPU Info:"
        nproc
        lscpu | grep "Model name"
        echo "üíø Disk Info:"
        df -h /
        echo "üë§ User Info:"
        whoami
        id
        echo "üåê Network Info:"
        ip route show default
        echo "=================================================="
        
        # Create logs directory with proper permissions
        mkdir -p logs
        chmod 755 logs
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Workflow started" >> logs/timeline.log
        
        # Create .ollama directory with proper permissions
        mkdir -p /home/runner/.ollama
        chmod 755 /home/runner/.ollama
        
    - name: üîê Validate Cloudflare Token
      run: |
        echo "üîê Validating Cloudflare tunnel token..."
        
        if [[ -z "${{ env.TUNNEL_TOKEN }}" ]]; then
          echo "‚ùå ERROR: No Cloudflare tunnel token provided!"
          echo "Please either:"
          echo "1. Add CLOUDFLARE_TUNNEL_TOKEN to your repository secrets"
          echo "2. Provide a token via the workflow input"
          exit 1
        fi
        
        # Basic token format validation (JWT-like structure)
        if [[ ! "${{ env.TUNNEL_TOKEN }}" =~ ^eyJ[A-Za-z0-9_-]+\.eyJ[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]]; then
          echo "‚ö†Ô∏è  Warning: Token format may be invalid. Proceeding anyway..."
        else
          echo "‚úÖ Token format appears valid"
        fi
        
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Token validated" >> logs/timeline.log
        
    - name: üì¶ Cache Ollama Models Directory
      id: cache-ollama-models
      uses: actions/cache@v4
      with:
        path: /home/runner/.ollama
        key: ollama-models-${{ runner.os }}-${{ github.event.inputs.model }}-v3
        restore-keys: |
          ollama-models-${{ runner.os }}-${{ github.event.inputs.model }}-
          ollama-models-${{ runner.os }}-
          
    - name: üì¶ Cache Ollama Binary
      id: cache-ollama-bin
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/ollama
        key: ollama-binary-${{ runner.os }}-v3
        
    - name: ‚¨áÔ∏è Install Ollama
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Installing Ollama" >> logs/timeline.log
        
        # Check if cached binary is valid
        if [[ "${{ steps.cache-ollama-bin.outputs.cache-hit }}" == "true" ]] && [[ -f /usr/local/bin/ollama ]]; then
          echo "‚úÖ Ollama binary restored from cache"
          if /usr/local/bin/ollama --version; then
            echo "‚úÖ Cached binary is valid"
          else
            echo "‚ùå Cached binary corrupted, reinstalling..."
            sudo rm -f /usr/local/bin/ollama
          fi
        fi
        
        # Install if not cached or corrupted
        if [[ ! -f /usr/local/bin/ollama ]]; then
          echo "üì• Installing Ollama..."
          curl -fsSL https://ollama.com/install.sh | sh
        fi
        
        # Verify installation
        ollama --version
        which ollama
        ls -la /usr/local/bin/ollama
        
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Ollama installation completed" >> logs/timeline.log
        
    - name: üîß Install Cloudflare Tunnel (cloudflared)
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Installing cloudflared" >> logs/timeline.log
        echo "üì• Installing Cloudflare Tunnel..."
        
        # Clean up any existing installations
        sudo apt-get remove -y cloudflared 2>/dev/null || true
        sudo rm -f /usr/local/bin/cloudflared
        
        # Add Cloudflare GPG key
        sudo mkdir -p --mode=0755 /usr/share/keyrings
        curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
        
        # Add Cloudflare repository
        echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared any main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
        
        # Update and install cloudflared
        sudo apt-get update -qq
        sudo apt-get install -y cloudflared
        
        # Verify installation
        cloudflared --version
        which cloudflared
        
        echo "‚úÖ Cloudflared installed successfully"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Cloudflared installation completed" >> logs/timeline.log
        
    - name: üßπ Cleanup & Prepare Environment
      run: |
        echo "üßπ Cleaning up environment..."
        
        # Kill any existing processes
        sudo pkill -f ollama || echo "No existing Ollama processes"
        sudo pkill -f cloudflared || echo "No existing cloudflared processes"
        
        # Wait for cleanup
        sleep 3
        
        # Verify no processes are running
        ps aux | grep -E "(ollama|cloudflared)" | grep -v grep || echo "‚úÖ Environment clean"
        
        # Ensure proper permissions for .ollama directory
        sudo chown -R runner:runner /home/runner/.ollama
        chmod -R 755 /home/runner/.ollama
        
        echo "‚úÖ Environment prepared"
        
    - name: üöÄ Start Ollama Server
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Starting Ollama server" >> logs/timeline.log
        echo "üöÄ Starting Ollama server..."
        
        # Set environment variables
        export OLLAMA_HOST=0.0.0.0:11543
        export OLLAMA_MODELS=/home/runner/.ollama/models
        export OLLAMA_ORIGINS="*"
        export OLLAMA_KEEP_ALIVE=30m
        
        # Start Ollama server in background
        nohup ollama serve > logs/ollama-server.log 2>&1 &
        OLLAMA_PID=$!
        echo $OLLAMA_PID > logs/ollama.pid
        
        echo "üìã Ollama PID: $OLLAMA_PID"
        echo "‚è≥ Waiting for Ollama to start..."
        
        # Wait for Ollama to be ready with better error handling
        for i in {1..45}; do
          if curl -sf http://0.0.0.0:11543/api/tags >/dev/null 2>&1; then
            echo "‚úÖ Ollama server is ready!"
            echo "üìã Ollama responding on port 11543"
            break
          fi
          
          if [[ $i -eq 45 ]]; then
            echo "‚ùå Ollama failed to start after 45 attempts"
            echo "üìã Server logs:"
            tail -20 logs/ollama-server.log 2>/dev/null || echo "No server logs found"
            echo "üìã Process status:"
            ps aux | grep ollama | grep -v grep || echo "No Ollama process found"
            exit 1
          fi
          
          echo "‚è≥ Attempt $i/45: Waiting for Ollama... ($(date '+%H:%M:%S'))"
          sleep 3
        done
        
        # Verify server is properly bound
        echo "üìã Network status:"
        netstat -tlnp 2>/dev/null | grep 11543 || ss -tlnp | grep 11543 || echo "Port 11543 status check"
        
        echo "üìã Testing local connection:"
        curl -v http://0.0.0.0:11543/api/tags 2>&1 | head -10
        
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Ollama server started successfully" >> logs/timeline.log
        
    - name: üåê Setup Cloudflare Managed Tunnel
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Setting up managed tunnel" >> logs/timeline.log
        echo "üåê Starting Cloudflare managed tunnel with token..."
        
        # Start tunnel with token authentication
        nohup cloudflared tunnel --no-autoupdate run --token "${{ env.TUNNEL_TOKEN }}" > logs/tunnel.log 2>&1 &
        TUNNEL_PID=$!
        echo $TUNNEL_PID > logs/tunnel.pid
        
        echo "üìã Tunnel PID: $TUNNEL_PID"
        echo "‚è≥ Waiting for tunnel to establish..."
        
        # Wait for tunnel to be ready
        TUNNEL_READY=false
        for i in {1..60}; do
          if [[ -f logs/tunnel.log ]]; then
            # Check for successful connection messages
            if grep -q "Connection.*registered" logs/tunnel.log || \
               grep -q "Tunnel.*ready" logs/tunnel.log || \
               grep -q "Connected to" logs/tunnel.log || \
               grep -q "Initial connection succeeded" logs/tunnel.log; then
              echo "‚úÖ Tunnel connection established!"
              TUNNEL_READY=true
              
              # Extract tunnel information from logs
              echo "üìã Tunnel logs:"
              tail -20 logs/tunnel.log
              
              # Since managed tunnels don't provide random URLs, we need to get the configured hostname
              # This would be pre-configured in your Cloudflare dashboard
              echo "‚ÑπÔ∏è  Note: Managed tunnels use pre-configured hostnames"
              echo "üìå Check your Cloudflare Zero Trust dashboard for the tunnel hostname"
              
              break
            fi
            
            # Check for errors
            if grep -q "error" logs/tunnel.log || grep -q "failed" logs/tunnel.log; then
              echo "‚ùå Error detected in tunnel logs:"
              grep -i "error\|failed" logs/tunnel.log | tail -5
            fi
          fi
          
          if [[ $i -eq 60 ]]; then
            echo "‚ùå Failed to establish tunnel after 60 attempts"
            echo "üìã Tunnel logs:"
            cat logs/tunnel.log 2>/dev/null || echo "No tunnel logs found"
            echo "üìã Process status:"
            ps aux | grep cloudflared | grep -v grep || echo "No cloudflared process found"
            exit 1
          fi
          
          echo "‚è≥ Attempt $i/60: Waiting for tunnel connection... ($(date '+%H:%M:%S'))"
          sleep 3
        done
        
        # Verify tunnel process is still running
        if ! ps -p $TUNNEL_PID > /dev/null; then
          echo "‚ùå Tunnel process died unexpectedly"
          echo "üìã Final tunnel logs:"
          cat logs/tunnel.log
          exit 1
        fi
        
        echo "‚úÖ Cloudflare managed tunnel is running"
        echo "üìå Access your Ollama server through the hostname configured in Cloudflare dashboard"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Managed tunnel established" >> logs/timeline.log
        
    - name: üì• Load Model with Enhanced Caching
      run: |
        # Use custom model if provided, otherwise use default
        MODEL_NAME="${{ github.event.inputs.model || 'qwen2.5:0.5b' }}"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Loading model: $MODEL_NAME" >> logs/timeline.log
        echo "üì• Loading model: $MODEL_NAME"
        
        # Set environment for ollama commands
        export OLLAMA_HOST=0.0.0.0:11543
        
        # Check current models
        echo "üìã Checking available models:"
        ollama list || echo "No models currently available"
        
        # Check if model exists in cache
        MODEL_EXISTS=false
        if ollama list | grep -q "$MODEL_NAME"; then
          echo "‚úÖ Model found in local cache"
          MODEL_EXISTS=true
        else
          echo "üì• Model not found, will download..."
        fi
        
        # Download model if needed
        if [[ "$MODEL_EXISTS" == "false" ]]; then
          echo "üì• Downloading model: $MODEL_NAME"
          echo "‚ö†Ô∏è  This may take several minutes for large models..."
          
          # Start memory monitoring
          nohup bash -c 'while true; do echo "$(date): $(free -h | grep Mem:)" >> logs/memory-monitor.log; sleep 30; done' &
          MONITOR_PID=$!
          echo $MONITOR_PID > logs/monitor.pid
          
          # Download with extended timeout and retry logic
          DOWNLOAD_SUCCESS=false
          for attempt in {1..3}; do
            echo "üì• Download attempt $attempt/3..."
            if timeout 1200 ollama pull "$MODEL_NAME"; then
              DOWNLOAD_SUCCESS=true
              break
            else
              echo "‚ö†Ô∏è  Download attempt $attempt failed, retrying..."
              sleep 10
            fi
          done
          
          # Stop monitoring
          kill $MONITOR_PID 2>/dev/null || true
          
          if [[ "$DOWNLOAD_SUCCESS" == "false" ]]; then
            echo "‚ùå Failed to download model after 3 attempts"
            exit 1
          fi
          
          echo "‚úÖ Model downloaded successfully"
        fi
        
        # Verify model is loaded
        echo "üìã Final model list:"
        ollama list
        
        # Pre-load model to ensure it's ready
        echo "üîÑ Pre-loading model for faster responses..."
        timeout 60 ollama run "$MODEL_NAME" "test" >/dev/null 2>&1 || echo "Pre-load completed"
        
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Model loading completed" >> logs/timeline.log
        
    - name: üß™ Test Model Response
      run: |
        echo "üß™ Testing model response..."
        MODEL_NAME="${{ github.event.inputs.model || 'qwen2.5:0.5b' }}"
        TEST_PROMPT="${{ github.event.inputs.test_prompt || 'Hello! Please respond with your model name and capabilities.' }}"
        
        export OLLAMA_HOST=0.0.0.0:11543
        
        echo "üìù Test prompt: $TEST_PROMPT"
        echo "ü§ñ Model response:"
        
        # Test the model with a timeout
        timeout 30 ollama run "$MODEL_NAME" "$TEST_PROMPT" || echo "Test completed or timed out"
        
        echo "‚úÖ Model test completed"
        
    - name: üì° Send Webhook Notification
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Sending webhook notification" >> logs/timeline.log
        
        MODEL_NAME="${{ github.event.inputs.model || 'qwen2.5:0.5b' }}"
        
        # For managed tunnels, we don't have a dynamic URL
        # You should configure this in your Cloudflare dashboard
        TUNNEL_INFO="Managed tunnel active - check Cloudflare dashboard for hostname"
        
        # Create comprehensive webhook payload
        WEBHOOK_PAYLOAD=$(jq -n \
          --arg event "ollama_server_ready" \
          --arg timestamp "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
          --arg workflow_run_id "${{ github.run_id }}" \
          --arg repository "${{ github.repository }}" \
          --arg model "$MODEL_NAME" \
          --arg tunnel_status "$TUNNEL_INFO" \
          --arg status "running" \
          --arg uptime "20 minutes" \
          '{
            event: $event,
            timestamp: $timestamp,
            workflow_run_id: $workflow_run_id,
            repository: $repository,
            model: $model,
            tunnel_status: $tunnel_status,
            server_config: {
              host: "0.0.0.0:11543",
              local_endpoints: {
                generate: "http://0.0.0.0:11543/api/generate",
                chat: "http://0.0.0.0:11543/api/chat",
                embeddings: "http://0.0.0.0:11543/api/embeddings",
                models: "http://0.0.0.0:11543/api/tags",
                show: "http://0.0.0.0:11543/api/show",
                ps: "http://0.0.0.0:11543/api/ps"
              }
            },
            server_status: $status,
            estimated_uptime: $uptime,
            runner_info: {
              os: "ubuntu-latest",
              memory: "32GB"
            },
            notes: "Using Cloudflare managed tunnel with token authentication. Access via pre-configured hostname in Cloudflare dashboard."
          }'
        )
        
        echo "üì° Sending webhook notification..."
        echo "üìã Payload preview:"
        echo "$WEBHOOK_PAYLOAD" | jq '.'
        
        # Send webhook with enhanced retry logic
        WEBHOOK_SENT=false
        for i in {1..5}; do
          if curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$WEBHOOK_PAYLOAD" \
            --max-time 30 \
            --retry 1 \
            --retry-delay 5 \
            -w "HTTP: %{http_code}, Time: %{time_total}s\n"; then
            echo "‚úÖ Webhook sent successfully (attempt $i)"
            WEBHOOK_SENT=true
            break
          else
            echo "‚ö†Ô∏è  Webhook attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        if [[ "$WEBHOOK_SENT" == "false" ]]; then
          echo "‚ùå All webhook attempts failed, continuing without notification"
        fi
        
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Webhook notification completed" >> logs/timeline.log
        
    - name: üìä Setup Monitoring
      run: |
        echo "üìä Setting up monitoring..."
        
        # Create monitoring script
        cat > monitor.sh << 'EOF'
        #!/bin/bash
        LOG_FILE="logs/monitor.log"
        
        while true; do
          echo "=== $(date -u '+%Y-%m-%d %H:%M:%S UTC') ===" >> "$LOG_FILE"
          
          # Memory status
          echo "Memory Usage:" >> "$LOG_FILE"
          free -h >> "$LOG_FILE"
          
          # CPU load
          echo "CPU Load:" >> "$LOG_FILE"
          uptime >> "$LOG_FILE"
          
          # Process checks
          echo "Process Status:" >> "$LOG_FILE"
          
          if pgrep -f ollama >/dev/null; then
            echo "‚úÖ Ollama: Running (PID: $(pgrep -f ollama))" >> "$LOG_FILE"
            # Check if Ollama is responding
            if curl -sf http://0.0.0.0:11543/api/tags >/dev/null 2>&1; then
              echo "  ‚úÖ API: Responding" >> "$LOG_FILE"
            else
              echo "  ‚ùå API: Not responding" >> "$LOG_FILE"
            fi
          else
            echo "‚ùå Ollama: Not running" >> "$LOG_FILE"
          fi
          
          if pgrep -f cloudflared >/dev/null; then
            echo "‚úÖ Cloudflared: Running (PID: $(pgrep -f cloudflared))" >> "$LOG_FILE"
          else
            echo "‚ùå Cloudflared: Not running" >> "$LOG_FILE"
          fi
          
          # Disk usage
          echo "Disk Usage:" >> "$LOG_FILE"
          df -h / | tail -1 >> "$LOG_FILE"
          
          echo "============================================" >> "$LOG_FILE"
          sleep 60
        done
        EOF
        
        chmod +x monitor.sh
        nohup ./monitor.sh &
        MONITOR_PID=$!
        echo $MONITOR_PID > logs/main-monitor.pid
        
        echo "‚úÖ Monitoring started (PID: $MONITOR_PID)"
        
    - name: ‚è∞ Keep Server Alive (20 Minutes)
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Starting 20-minute keep-alive" >> logs/timeline.log
        echo "‚è∞ Keeping server alive for 20 minutes..."
        echo "üåê Server is accessible via your Cloudflare managed tunnel"
        echo "üìå Check your Cloudflare Zero Trust dashboard for the tunnel hostname"
        
        START_TIME=$(date +%s)
        DURATION=$((20 * 60))  # 20 minutes
        
        echo "üìä Starting keep-alive loop..."
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          REMAINING=$((DURATION - ELAPSED))
          
          if [[ $REMAINING -le 0 ]]; then
            echo "‚è∞ 20 minutes completed, ending keep-alive"
            break
          fi
          
          MINUTES_LEFT=$((REMAINING / 60))
          SECONDS_LEFT=$((REMAINING % 60))
          
          echo "‚è∞ Server active... Time remaining: ${MINUTES_LEFT}m ${SECONDS_LEFT}s ($(date '+%H:%M:%S'))"
          
          # Health checks
          HEALTH_STATUS="‚úÖ"
          
          if ! pgrep -f ollama >/dev/null; then
            echo "‚ùå WARNING: Ollama process not found!"
            HEALTH_STATUS="‚ùå"
            # Attempt to restart Ollama
            echo "üîÑ Attempting to restart Ollama..."
            export OLLAMA_HOST=0.0.0.0:11543
            export OLLAMA_MODELS=/home/runner/.ollama/models
            export OLLAMA_ORIGINS="*"
            export OLLAMA_KEEP_ALIVE=30m
            nohup ollama serve > logs/ollama-server-restart.log 2>&1 &
            echo $! > logs/ollama.pid
            sleep 5
          fi
          
          if ! pgrep -f cloudflared >/dev/null; then
            echo "‚ùå WARNING: Tunnel process not found!"
            HEALTH_STATUS="‚ùå"
            # Attempt to restart tunnel
            echo "üîÑ Attempting to restart tunnel..."
            nohup cloudflared tunnel --no-autoupdate run --token "${{ env.TUNNEL_TOKEN }}" > logs/tunnel-restart.log 2>&1 &
            echo $! > logs/tunnel.pid
            sleep 5
          fi
          
          # API health check
          if ! curl -sf http://0.0.0.0:11543/api/tags >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  Ollama API not responding"
            HEALTH_STATUS="‚ö†Ô∏è"
          fi
          
          # Status report every 5 minutes
          if [[ $((ELAPSED % 300)) -lt 30 ]] && [[ $ELAPSED -gt 30 ]]; then
            echo "üìä 5-minute status report ($(date -u '+%Y-%m-%d %H:%M:%S UTC')):"
            echo "  üî• Health: $HEALTH_STATUS"
            echo "  üíæ Memory: $(free -h | grep Mem: | awk '{print $3"/"$2}')"
            echo "  üñ•Ô∏è  CPU Load: $(uptime | awk -F'load average:' '{ print $2 }')"
            echo "  üíø Disk: $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5")"}')"
            
            # Show running models
            export OLLAMA_HOST=0.0.0.0:11543
            echo "  ü§ñ Active models:"
            ollama ps 2>/dev/null || echo "    Unable to fetch active models"
          fi
          
          sleep 30
        done
        
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Keep-alive completed" >> logs/timeline.log
        
    - name: üìä Final Status Report
      if: always()
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Generating final report" >> logs/timeline.log
        
        echo "==================== FINAL STATUS REPORT ===================="
        echo "üïê Workflow ending at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Server status
        echo ""
        echo "üñ•Ô∏è  OLLAMA SERVER STATUS:"
        if curl -sf http://0.0.0.0:11543/api/tags >/dev/null 2>&1; then
          echo "  ‚úÖ Status: Running and responding"
          echo "  üìç Local endpoint: http://0.0.0.0:11543"
        else
          echo "  ‚ùå Status: Not responding"
        fi
        
        # Tunnel status
        echo ""
        echo "üåê CLOUDFLARE TUNNEL STATUS:"
        if pgrep -f cloudflared >/dev/null; then
          echo "  ‚úÖ Process: Running (PID: $(pgrep -f cloudflared))"
          echo "  üîê Authentication: Token-based (managed tunnel)"
          echo "  üìå Access: Via pre-configured hostname in Cloudflare dashboard"
        else
          echo "  ‚ùå Process: Not running"
        fi
        
        # Resource usage
        echo ""
        echo "üíæ RESOURCE USAGE:"
        echo "  Memory:"
        free -h | sed 's/^/    /'
        echo "  CPU Load: $(uptime | awk -F'load average:' '{ print $2 }')"
        echo "  Disk:"
        df -h / | sed 's/^/    /'
        
        # Model status
        echo ""
        echo "ü§ñ MODEL STATUS:"
        export OLLAMA_HOST=0.0.0.0:11543
        if ollama list 2>/dev/null; then
          ollama list | sed 's/^/  /'
        else
          echo "  Unable to retrieve model list"
        fi
        
        # Process status
        echo ""
        echo "üîÑ RUNNING PROCESSES:"
        ps aux | grep -E "(ollama|cloudflared)" | grep -v grep | sed 's/^/  /' || echo "  No relevant processes found"
        
        # Cache information
        echo ""
        echo "üíæ CACHE STATUS:"
        echo "  üì¶ Ollama models: ${{ steps.cache-ollama-models.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"
        echo "  üì¶ Ollama binary: ${{ steps.cache-ollama-bin.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"
        
        # Logs summary
        echo ""
        echo "üìÅ GENERATED LOGS:"
        if [[ -d logs ]]; then
          ls -lah logs/ | sed 's/^/  /'
        else
          echo "  No logs directory found"
        fi
        
        # Timeline
        echo ""
        echo "üìú WORKFLOW TIMELINE:"
        if [[ -f logs/timeline.log ]]; then
          cat logs/timeline.log | sed 's/^/  /'
        else
          echo "  No timeline log found"
        fi
        
        # Tunnel logs summary
        echo ""
        echo "üåê TUNNEL CONNECTION LOGS (last 10 lines):"
        if [[ -f logs/tunnel.log ]]; then
          tail -10 logs/tunnel.log | sed 's/^/  /'
        else
          echo "  No tunnel logs found"
        fi
        
        echo ""
        echo "============================================================"
        
    - name: üßπ Cleanup Processes
      if: always()
      run: |
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Starting cleanup" >> logs/timeline.log
        echo "üßπ Cleaning up processes..."
        
        # Stop monitoring
        if [[ -f logs/main-monitor.pid ]]; then
          MONITOR_PID=$(cat logs/main-monitor.pid)
          kill $MONITOR_PID 2>/dev/null || true
          echo "‚úÖ Monitor process stopped"
        fi
        
        # Stop tunnel
        if [[ -f logs/tunnel.pid ]]; then
          TUNNEL_PID=$(cat logs/tunnel.pid)
          kill $TUNNEL_PID 2>/dev/null || true
          echo "‚úÖ Tunnel process stopped"
        fi
        
        # Stop Ollama gracefully
        if [[ -f logs/ollama.pid ]]; then
          OLLAMA_PID=$(cat logs/ollama.pid)
          kill $OLLAMA_PID 2>/dev/null || true
          echo "‚úÖ Ollama process stopped"
        fi
        
        # Wait for graceful shutdown
        sleep 5
        
        # Force kill any remaining processes
        sudo pkill -f cloudflared || true
        sudo pkill -f ollama || true
        
        echo "‚úÖ All processes cleaned up"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Cleanup completed" >> logs/timeline.log
        
    - name: üíæ Upload Comprehensive Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ollama-server-logs-${{ github.run_id }}
        path: logs/
        retention-days: 7
        
    - name: üìù Create Summary
      if: always()
      run: |
        echo "## üìä Ollama Server Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Basic info
        echo "### üìã Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Model**: ${{ github.event.inputs.model || 'qwen2.5:0.5b' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow Run**: [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Started**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Tunnel info
        echo "### üåê Cloudflare Tunnel" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: Managed tunnel with token authentication" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: Check your [Cloudflare Zero Trust Dashboard](https://one.dash.cloudflare.com/) for tunnel details" >> $GITHUB_STEP_SUMMARY
        echo "- **Note**: Access your Ollama server using the hostname configured in your Cloudflare dashboard" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # API Endpoints
        echo "### üîå API Endpoints (via tunnel hostname)" >> $GITHUB_STEP_SUMMARY
        echo "Replace \`<your-tunnel-hostname>\` with your configured hostname:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "https://<your-tunnel-hostname>/api/generate" >> $GITHUB_STEP_SUMMARY
        echo "https://<your-tunnel-hostname>/api/chat" >> $GITHUB_STEP_SUMMARY
        echo "https://<your-tunnel-hostname>/api/embeddings" >> $GITHUB_STEP_SUMMARY
        echo "https://<your-tunnel-hostname>/api/tags" >> $GITHUB_STEP_SUMMARY
        echo "https://<your-tunnel-hostname>/api/show" >> $GITHUB_STEP_SUMMARY
        echo "https://<your-tunnel-hostname>/api/ps" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Example usage
        echo "### üí° Example Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Test the connection" >> $GITHUB_STEP_SUMMARY
        echo "curl https://<your-tunnel-hostname>/api/tags" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Generate a response" >> $GITHUB_STEP_SUMMARY
        echo "curl https://<your-tunnel-hostname>/api/generate \\" >> $GITHUB_STEP_SUMMARY
        echo "  -d '{" >> $GITHUB_STEP_SUMMARY
        echo '    "model": "${{ github.event.inputs.model || 'qwen2.5:0.5b' }}",' >> $GITHUB_STEP_SUMMARY
        echo '    "prompt": "Hello, how are you?",' >> $GITHUB_STEP_SUMMARY
        echo '    "stream": false' >> $GITHUB_STEP_SUMMARY
        echo "  }'" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Status
        echo "### ‚úÖ Final Status" >> $GITHUB_STEP_SUMMARY
        if curl -sf http://0.0.0.0:11543/api/tags >/dev/null 2>&1; then
          echo "- ‚úÖ Ollama server: **Running**" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Ollama server: **Stopped**" >> $GITHUB_STEP_SUMMARY
        fi
        
        if pgrep -f cloudflared >/dev/null; then
          echo "- ‚úÖ Cloudflare tunnel: **Active**" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Cloudflare tunnel: **Inactive**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÇ Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- [Download Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
